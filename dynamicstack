// YOUR NAME 손명원	
// STUDENT ID 2018011861
#define _CRT_SECURE_NO_WARNINGS
#include <malloc.h>
#include<stdlib.h>
#include<stdio.h>
#define MAX_SIZE 64



//array의 동적 할당을 위해 array를 포인터 변수로 선언한다.
typedef  struct  _Stack {
	int top;
	int capacity;
	int* array;
}stack;
//struct 로 수정, MAX_SIZE<-MAXSIZE
//메모리 함수의 할당이 안될수도있어서 if문이용하여 NULL이 아니게 만들어준다.
stack* CreateStack() {
	stack* s = (stack*)malloc(sizeof(stack));
	if (s != NULL) {
		s->capacity = MAX_SIZE;
		s->top = -1;
		s->array = (int*)malloc(s->capacity * sizeof(int));//배열의 공간을 여유있게 배정한다.
	}return s;
}
int Top(stack* s) {//top에서 출력할경우 에러가 발생하여 s->array[s->top]값을 반환해준다.
	return 	s->array[s->top];//top을 참조해야되는 함수들보다 앞으로 이동시켰다.
}
int isEmptyStack(stack* s) {// 만약 스택이 비여있다면 empty를 출력한다.
	if (s->top == -1) {
		printf("empty\n");
	}return  0;

}
//만약 스택이 가득차게 된다면 capacity의 크기를 2배로 크게하여
//realloc으로 array의 크기를 2배로 만들어준다.
int isFullStack(stack* s) {
	if (s->top == s->capacity) {//top과 capacity가 같게 될경우 용량을 늘려준다.
		printf("full\n");
		s->capacity = s->capacity * 2;
		s->array = (int*)realloc(s->array, s->capacity * sizeof(int));
	}
	return 0;

}
//push 일떄는 스택이 가득차있는지 확인해야된다.그래서 isfullstack이 스택에 들어와야한다.
int  PushStack(stack* s, int data) {
	if (isFullStack(s))
		;
	else {
		s->array[++s->top] = data;
		printf("%d\n", Top(s));
	}return 0;
}
//;가 없다.i
int PopStack(stack* s) {
	if (isEmptyStack(s)) { ; }
	else if (s->top < s->capacity / 2) {//만약의 top의 크기가 capacity의 반보다 작을경우 실행한다.
		if (s->top >= 0) {//만약 s->top이 0보다 작을때도 나누게 되면 오류가 생기게 된다. 따라서 0보다 크때 실행한다.
			printf("%d\n", s->array[s->top]);//먼저 반으로 나누게 되면 top에 배열에서 출력은 사라질수있기때문에 먼저
			s->array[s->top--];//출력을 해준다.
			s->capacity = s->capacity / 2;//capacity을 반으로 나누어 주게 되면 이와 같이 array의 용량또한 줄어들게된다.
			s->array = (int*)realloc(s->array, s->capacity * sizeof(int));
			printf("________/2_________\n");//반으로 나누었음을 출력해준다.
		}
	}
	else {
		printf("%d\n", Top(s));//나누는 활동이 없는 나머지 경우는 top을 출력후
		s->array[s->top--];//top의 위치를 1만큼 낮추어 다음 출력을 준비한다.
		return 0;
	}
	return 0;
}
void DeleteStack(stack* s) {
	if (s) {
		if (s->array) {//먼저 스택안에 있는 배열을 동적할당 했기때문에 먼저 free해주어야 오류가 없다.
			free(s->array);
		}
		free(s);
	}
}

int main(void) {
	stack* s = CreateStack();
	for (int i = 0; i <= MAX_SIZE; i++) {
		PushStack(s, i * 10);//top(s)는 for문에서 불필요하므로 제거했다.
	}
	for (int i = 0; i <= MAX_SIZE; i++) {
		PopStack(s);
		printf("size of Stack: %d\n", s->capacity);
	}
	DeleteStack(s);//모든 화동이 종료외었으므로 동적할당했던 메모리를 해제해준다.
}
