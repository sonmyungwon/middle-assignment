#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
typedef struct _queue {
    int front;
    int rear;
    int capacity;
    int* array;
    int top;// 제일 위의 수를 셀수있게 top을 만든다. 
    int* revarray;//큐안에 반대로 셀수있도록 배열을하나만든다. 
} queue;

queue* CreateCQueue() {
    queue* q = (queue*)malloc(sizeof(queue));
    if (!q)
        return NULL;
    q->capacity = 1;
    q->front = q->rear = -1;
    q->array = (int*)malloc(q->capacity * sizeof(int));
    q->top = -1;//-1로 하여 비어있을을 표시한다 
    q->revarray = (int*)malloc(q->capacity * sizeof(int));//동적할당해준다. 
    if (!q->array)
        return NULL;
    if (!q->revarray)
        return NULL;
    return q;
}

int IsEmptyCQ(queue* q)
{
    return (q->front == -1);
}

int IsFullCQ(queue* q)
{
    return ((q->rear + 1) % q->capacity == q->front);
}

int CQsize(queue* q)
{
    return (q->capacity - q->front + q->rear + 1) % q->capacity;
}

void ResizeCQ(queue* q)
{
    int size = q->capacity;
    q->capacity = q->capacity * 2;
    q->array = (int*)realloc(q->array, q->capacity * sizeof(int));
    q->revarray = (int*)realloc(q->revarray, q->capacity * sizeof(int));//revarray도 array와 같은 데이터를 넣고 크기도 같아야한다. 
    if (!q->array)
    {
        printf("failed to resize\n");
        return;
    }
    if (!q->revarray)
    {
        printf("failed to resize\n");
        return;
    }
    if (q->front > q->rear)
    {
        for (int i = 0; i < q->front; i++)
        {
            q->array[i + size] = q->array[i];
        }
        q->rear = q->rear + size;
    }
    printf("Size of Q doubled\n");
}

void EnCQ(queue* q, int data)
{
    if (IsFullCQ(q))
        ResizeCQ(q);
    q->rear = (q->rear + 1) % q->capacity;
    q->array[q->rear] = data;
    q->revarray[++q->top] = data;//array의 rear에 들어갈 데이터도 revarray[top]에 넣어 저장한다. 
    if (q->front == -1)
        q->front = q->rear;

    printf("EnCQueue %d\n", q->array[q->rear]);

}

void PushCQ(queue* q, int data)
{
    q->rear = (q->rear + 1) % q->capacity;
    q->array[q->rear] = data;
    if (q->front == -1)
        q->front = q->rear;

    printf("reverseEnCQueue %d\n", q->array[q->rear]);
}

int DeCQ(queue* q)
{
    int data = 0;
    if (IsEmptyCQ(q))
    {
        printf("CQueue is Empty\n");
        return 0;
    }
    else
    {
        data = q->array[q->front];
        if (q->front == q->rear)
            q->front = q->rear = -1;
        else
            q->front = (q->front + 1) % q->capacity;
    }
    printf("DeCQueue %d\n", data);
    return data;
}

void DelCQ(queue* q)
{
    if (q)
    {
        if (q->array) {
            free(q->array);
        }
        else if (q->revarray) {
            free(q->revarray);// 삭제해준다. 
        }
        free(q);
    }
    printf("Queue Deleted\n");
}


void ReverseQueue(queue* q) {//queue는 처음수부터 출력할수있고 stack에서 top은 입력받은만큼 증가한 상태이므로 1씩 줄여가면서 출력하게되면
    printf("___________________\n");//역으로 출력한것과 같게 된다.
    while (1) { //큐에 들어있정보를 비우고 역순으로 다시 큐를 만든다. 
        DeCQ(q);
        if (q->rear == -1) {
            break;
        }
    }
    printf("___________________\n");
    while (1) {
        PushCQ(q, q->revarray[q->top--]);//revarray는 넣지 않고 큐에만 정보를 넣어준다.
        //top은 배열에서 제일 나중에 들어온 값을 가르키고 있어 제일 끝에 위치한다.  top의 위치를 한칸 낮추어 다음수를 읽어준다. 
        if (q->top == -1) {
            break;
        }
    }
    printf("___________________\n");
}
int main(void)
{
    queue* Q = CreateCQueue();
    for (int i = 0; i < 10; i++) {
        EnCQ(Q, i * 10);
    }
    ReverseQueue(Q);
    for (int i = 0; i < 10; i++)
        DeCQ(Q);

    DelCQ(Q);
    return 0;
}
